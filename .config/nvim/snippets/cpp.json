{
    "boilerplate": {
        "prefix": ["bp", "st"],
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "int main(int argc, char *argv[]) {",
            "    ios_base::sync_with_stdio(false);",
            "    cin.tie(NULL);",
            "",
            "    $1",
            "",
            "    return 0;",
            "}"
        ],
        "description": "Boilerâ€‘Plate for C++ code.",
        "scope": "c,cpp"
    },
    "cp-boilerplate": {
        "prefix": ["cp"],
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "#define debug(x) cout << #x << \" is \" << x << endl;",
            "#define yes cout << \"YES\" << '\\n'",
            "#define no cout << \"NO\" << '\\n'",
            "#define alice cout << \"Alice\" << '\\n'",
            "#define bob cout << \"Bob\" << '\\n'",
            "#define all(x) x.begin(), x.end()",
            "#define rall(x) x.rbegin(), x.rend()",
            "#define ump unordered_map",
            "#define mod 1000000007",
            "#define en '\\n'",
            "#define pb push_back",
            "#define eb emplace_back",
            "",
            "typedef long long ll;",
            "typedef pair<int, int> pii;",
            "typedef pair<ll, ll> pll;",
            "",
            "void solve() {",
            "    $1",
            "}",
            "",
            "int main() {",
            "    ios_base::sync_with_stdio(false);",
            "    cin.tie(NULL);",
            "",
            "    int t = 1;",
            "    cin >> t;",
            "    while(t--) {",
            "        solve();",
            "    }",
            "    return 0;",
            "}"
        ],
        "description": "Boilerplate for competitive programming in C++ with debugging utilities.",
        "scope": "cpp"
    },
    "DSU": {
        "prefix": ["dsu"],
        "body": [
            "class DSU {",
            "public:",
            "    vector<int>par,size;",
            "",
            "    DSU(int n){",
            "        par.resize(n);",
            "        size.assign(n, 1);",
            "        iota(par.begin(),par.end(),0);",
            "    }",
            "",
            "    int find(int x){",
            "        if(par[x]==x) return x;",
            "        return par[x]=find(par[x]);",
            "    }",
            "",
            "    bool unite(int x,int y){",
            "        x=find(x);",
            "        y=find(y);",
            "",
            "        if(x==y) return false;",
            "",
            "        if(size[x]<size[y]) swap(x,y);",
            "        size[x]+=size[y];",
            "        par[y]=x;",
            "        return true;",
            "    }",
            "};"
        ],
        "description": "DSU code snippet",
        "scope": "c,cpp"
    },
    "BIT": {
        "prefix": ["bit", "fenwick"],
        "body": [
            "class BIT {",
            "    vector<int> bit;",
            "    int n;",
            "",
            "public:",
            "    BIT(int n) : n(n) {",
            "        bit.resize(n + 1, 0);",
            "    }",
            "",
            "    void add(int i, int x) {",
            "        while (i <= n) {",
            "            bit[i] += x;",
            "            i += (i & -i);",
            "        }",
            "    }",
            "",
            "    int query(int r) {",
            "        int sum = 0;",
            "        while (r > 0) {",
            "            sum += bit[r];",
            "            r -= (r & -r);",
            "        }",
            "        return sum;",
            "    }",
            "",
            "    int rquery(int l, int r) {",
            "        return query(r) - query(l - 1);",
            "    }",
            "};"
        ],
        "description": "Binary Indexed Tree / Fenwick Tree implementation",
        "scope": "c,cpp"
    }
}

